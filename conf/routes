########################################################################################################################
# Routes for the template controller
########################################################################################################################

GET     /                                       eu.seitzal.opentab.controllers.TemplateController.renderIndex()

# GET     /login                                  eu.seitzal.opentab.controllers.TemplateController.renderLogin()

# GET     /tab/:tabid                             eu.seitzal.opentab.controllers.TemplateController.renderTabIndex(tabid: Int)

# GET     /tab/:tabid/                            eu.seitzal.opentab.controllers.TemplateController.renderTabIndex(tabid: Int)

# GET     /tab/:tabid/teams                       eu.seitzal.opentab.controllers.TemplateController.renderTeams(tabid: Int)

# GET     /tab/:tabid/speakers                    eu.seitzal.opentab.controllers.TemplateController.renderSpeakers(tabid: Int, team: Option[String])

# GET     /tab/:tabid/judges                      eu.seitzal.opentab.controllers.TemplateController.renderJudges(tabid: Int)

# GET     /tab/:tabid/rounds                      eu.seitzal.opentab.controllers.TemplateController.renderRounds(tabid: Int)

# GET     /tab/:tabid/round/:number/setup         eu.seitzal.opentab.controllers.TemplateController.renderRoundSetup(tabid: Int, number: Int)

########################################################################################################################
# Routes for the authentication controller
########################################################################################################################

POST    /login                      eu.seitzal.opentab.controllers.AuthController.login(origin: Option[String])

GET     /logout                     eu.seitzal.opentab.controllers.AuthController.logout()

########################################################################################################################
# Routes for the REST API controller
########################################################################################################################

GET  /api/routes.js  eu.seitzal.opentab.controllers.RESTController.jsRouter()

GET  /api/tabs  eu.seitzal.opentab.controllers.RESTController.getAllTabs()

GET  /api/tab/:tabid  eu.seitzal.opentab.controllers.RESTController.getTab(tabid: Int)

GET  /api/tab/:tabid/teams  eu.seitzal.opentab.controllers.RESTController.getAllTeams(tabid: Int)

GET  /api/tab/:tabid/delegations  eu.seitzal.opentab.controllers.RESTController.getAllDelegations(tabid: Int)

GET  /api/tab/:tabid/speakers  eu.seitzal.opentab.controllers.RESTController.getAllSpeakers(tabid: Int)

GET  /api/tab/:tabid/judges  eu.seitzal.opentab.controllers.RESTController.getAllJudges(tabid: Int)

GET  /api/tab/:tabid/rounds  eu.seitzal.opentab.controllers.RESTController.getRounds(tabid: Int)

GET  /api/tab/:tabid/round/:number  eu.seitzal.opentab.controllers.RESTController.getRound(tabid: Int, number: Int)

+nocsrf
POST  /api/tab/:tabid/round  eu.seitzal.opentab.controllers.RESTController.addRound(tabid: Int)

+nocsrf
DELETE  /api/tab/:tabid/round/:number  eu.seitzal.opentab.controllers.RESTController.deleteRound(tabid: Int, number: Int)

+nocsrf
PATCH  /api/tab/:tabid/round/:number/lock  eu.seitzal.opentab.controllers.RESTController.lockRound(tabid: Int, number: Int)

+nocsrf
PATCH  /api/tab/:tabid/round/:number/unlock  eu.seitzal.opentab.controllers.RESTController.unlockRound(tabid: Int, number: Int)

GET  /api/tab/:tabid/round/:number/draw/exists  eu.seitzal.opentab.controllers.RESTController.isDrawn(tabid: Int, number: Int)

GET  /api/tab/:tabid/round/:number/draw  eu.seitzal.opentab.controllers.RESTController.getDraw(tabid: Int, number: Int)

+nocsrf
POST  /api/tab/:tabid/round/:number/draw  eu.seitzal.opentab.controllers.RESTController.setDraw(tabid: Int, number: Int)

GET  /api/tab/:tabid/generate-pairings/random  eu.seitzal.opentab.controllers.RESTController.getRandomPairings(tabid: Int)

GET  /api/team/:teamid  eu.seitzal.opentab.controllers.RESTController.getTeam(teamid: Int)

+nocsrf
POST  /api/team  eu.seitzal.opentab.controllers.RESTController.createTeam()

+nocsrf
DELETE  /api/team/:teamid  eu.seitzal.opentab.controllers.RESTController.deleteTeam(teamid: Int)

+nocsrf
PATCH  /api/team/:teamid  eu.seitzal.opentab.controllers.RESTController.updateTeam(teamid: Int)

+nocsrf
PATCH  /api/team/:teamid/toggle  eu.seitzal.opentab.controllers.RESTController.toggleTeam(teamid: Int)

GET  /api/team/:teamid/speakers  eu.seitzal.opentab.controllers.RESTController.getAllSpeakersOnTeam(teamid: Int)

GET  /api/speaker/:speakerid  eu.seitzal.opentab.controllers.RESTController.getSpeaker(speakerid: Int)

+nocsrf
POST  /api/speaker  eu.seitzal.opentab.controllers.RESTController.createSpeaker()

+nocsrf
DELETE  /api/speaker/:speakerid  eu.seitzal.opentab.controllers.RESTController.deleteSpeaker(speakerid: Int)

+nocsrf
PATCH  /api/speaker/:speakerid  eu.seitzal.opentab.controllers.RESTController.updateSpeaker(speakerid: Int)

GET  /api/judge/:judgeid  eu.seitzal.opentab.controllers.RESTController.getJudge(judgeid: Int)

+nocsrf
POST  /api/judge  eu.seitzal.opentab.controllers.RESTController.createJudge()

+nocsrf
DELETE  /api/judge/:judgeid  eu.seitzal.opentab.controllers.RESTController.deleteJudge(judgeid: Int)

+nocsrf
PATCH  /api/judge/:judgeid  eu.seitzal.opentab.controllers.RESTController.updateJudge(judgeid: Int)

+nocsrf
PATCH  /api/judge/:judgeid/toggle  eu.seitzal.opentab.controllers.RESTController.toggleJudge(judgeid: Int)

GET  /api/judge/:judgeid/clashes  eu.seitzal.opentab.controllers.RESTController.getClashesForJudge(judgeid: Int)

+nocsrf
POST  /api/judge/:judgeid/clash/:teamid  eu.seitzal.opentab.controllers.RESTController.setClash(judgeid: Int, teamid: Int, level: Int)

+nocsrf
DELETE  /api/judge/:judgeid/clash/:teamid  eu.seitzal.opentab.controllers.RESTController.unsetClash(judgeid: Int, teamid: Int)            

GET  /api/verifykey  eu.seitzal.opentab.controllers.RESTController.remoteVerifyKey()

########################################################################################################################
# Route for static assets
########################################################################################################################

GET     /assets/*file               controllers.Assets.versioned(path="/public", file: Asset)
